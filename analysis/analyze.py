import os
import glob
import datetime
import matplotlib.pyplot as plt
import numpy as np

PATH_HERE = os.path.abspath(os.path.dirname(__file__))
PATH_STATS = os.path.abspath(PATH_HERE+"/../stats")


def getGrabberUptime(logLinesByGrabber, grabberID):
    grabberLines = [x for x in logLinesByGrabber if x[1] == grabberID]
    hashesSeen = 1
    for i in range(1, len(grabberLines)):
        hashNow = grabberLines[i][2]

        # call it active if the hash is different in the last hour
        for attempts in range(1, 7):
            if i >= attempts:
                hashBefore = grabberLines[i-attempts][2]
                if hashNow != hashBefore:
                    hashesSeen += 1
                    break

    if hashesSeen == 1:
        uptimeFrac = 0
    else:
        uptimeFrac = hashesSeen / len(grabberLines)
    return uptimeFrac


def uptimesFromDayFile(statsFilePath):
    print("calculating uptimes from", statsFilePath)
    with open(statsFilePath) as f:
        raw = f.read().split("\n")
    logLinesByGrabber = []
    grabberIDs = set()
    for line in raw:
        line = line.strip()
        if len(line) == 0:
            continue
        timestamp, grabbers = line.split(",", 1)
        for grabber in grabbers.split(","):
            grabber = grabber.replace(" HiFer", "")
            grabber = grabber.replace("&", "")
            grabberID, grabberHash = grabber.split(" ")
            grabberIDs.add(grabberID)
            logLinesByGrabber.append([timestamp, grabberID, grabberHash])
    grabberIDs = sorted(list(grabberIDs))
    grabberUptimes = {}
    for grabberID in grabberIDs:
        uptimeFrac = getGrabberUptime(logLinesByGrabber, grabberID)
        grabberUptimes[grabberID] = uptimeFrac
    return grabberUptimes


def getUptimesByDay(maximumDayCount=999999):
    statsFilePaths = sorted(glob.glob(PATH_STATS+"/*.txt"))

    # create list of datetimes
    uptimesByDay = {}
    for statsFilePath in statsFilePaths:
        logDate = os.path.basename(statsFilePath).split(".")[0]
        logDateTime = datetime.datetime.strptime(logDate, '%Y-%m-%d')
        grabberUptimes = uptimesFromDayFile(statsFilePath)
        uptimesByDay[logDateTime] = grabberUptimes
        if len(uptimesByDay) > maximumDayCount:
            break
    return uptimesByDay


def graphUptimesForOneDay(grabberUptimes, title=None):
    grabberIDs = sorted(list(grabberUptimes.keys()))
    uptimes = np.array([grabberUptimes[x] for x in grabberIDs])
    positions = range(len(grabberIDs))

    plt.figure(figsize=(12, 6))
    plt.title(title)
    plt.ylabel("Uptime (%)")
    plt.bar(positions, uptimes*100)
    plt.xticks(positions, grabberIDs, rotation='vertical')
    plt.axis([-1, positions[-1]+1, None, None])
    plt.tight_layout()
    plt.show()


def graphUptimesOverTime(uptimesByDay):

    days = sorted(list(uptimesByDay.keys()))
    tickLabels = [str(x).split(" ")[0] for x in days]

    everyGrabberID = set()
    for day in sorted(list(uptimesByDay.keys())):
        dayIDs = sorted(list(uptimesByDay[day].keys()))
        for dayID in dayIDs:
            everyGrabberID.add(dayID)
    everyGrabberID = sorted(list(everyGrabberID))
    print(f"Found {len(everyGrabberID)} callsigns over {len(days)} days")

    for grabberID in everyGrabberID:
        print("creating graph for", grabberID)
        uptimes = np.zeros(len(days))
        for i, day in enumerate(days):
            dayUptimes = uptimesByDay[day]
            if grabberID in dayUptimes.keys():
                uptimes[i] = dayUptimes[grabberID]

        uptimes = np.array(uptimes)
        positions = np.arange(len(uptimes))

        plt.figure(figsize=(10, 4))
        plt.grid(alpha=.2, ls='--')
        plt.title(f"{grabberID} Grabber Uptime")
        plt.ylabel("Uptime (%)")
        plt.bar(days, uptimes*100)
        plt.axis([None, None, 0, 105])
        #plt.xticks(range(len(days)), tickLabels, rotation='vertical')
        plt.gcf().autofmt_xdate()
        plt.tight_layout()
        plt.savefig(f"{PATH_HERE}/graphs/{grabberID}.png")
        plt.close()


def updateMarkdown(uptimesByDay):
    text = "# QRSS Plus Grabber Uptime History\n\n"
    timestamp = str(datetime.datetime.now()).split(" ")[0]
    text += f"_Generated by [analyze.py](analyze.py) on {timestamp}_\n\n"

    days = sorted(list(uptimesByDay.keys()))
    dayFirst = days[0].strftime("%Y-%m-%d")
    dayLast = days[-1].strftime("%Y-%m-%d")
    text += f"Data here represents continuous logging over {len(days)} days "
    text += f"({dayFirst} to {dayLast})\n\n"

    grabberIDs = []
    for imageFileName in os.listdir(PATH_HERE+"/graphs/"):
        grabberIDs.append(imageFileName.replace(".png", ""))
    text += "**Grabbers included in this list:** "
    grabberLinks = [f"[{x}](#{x})" for x in grabberIDs]
    text += ", ".join(grabberLinks) + "\n\n"

    for imageFileName in os.listdir(PATH_HERE+"/graphs/"):
        grabberID = imageFileName.replace(".png", "")
        text += f"## {grabberID}\n\n"
        text += f"![](graphs/{imageFileName})\n\n"

    mdPath = PATH_HERE+"/readme.md"
    with open(mdPath, 'w') as f:
        f.write(text)
    print("wrote", mdPath)

def removeOldGraphs():
    print("deleting old graphs...")
    for imageFilePath in glob.glob(PATH_HERE+"/graphs/*.png"):
        os.remove(imageFilePath)

if __name__ == "__main__":
    removeOldGraphs()
    uptimesByDay = getUptimesByDay()
    graphUptimesOverTime(uptimesByDay)
    updateMarkdown(uptimesByDay)
    print("DONE")
